
metavar var, x, n, s ::= {{ com term variable }}
{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[var]]} }}

%metavar d ::= {{ tex \delta }} {{}}

metavar v ::= {{ com term variable }} {{ tex \nu }}
%{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
%{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[var]]} }}

indexvar index, j ::= {{ isa num }} {{ coq nat }} {{ hol num }} 



grammar

terminals :: 'terminals_' ::=
  | \            ::   :: lambda  {{ tex \lambda }}
  | -->          ::   :: red     {{ tex \longrightarrow }}
  | ==> :: :: bred {{ tex \Longrightarrow }}
%  | ->          ::   :: func     {{ tex \rightarrow }}
%  | ->c          ::   :: funcc   {{ tex \rightarrow_{[c]} }}
%  | >x :: :: arrowx {{ tex \overrightarrow{x} }}
%  | >t :: :: arrowt {{ tex \overrightarrow{t} }}
%  | >tau :: :: arrowtau {{ tex \overrightarrow{\tau} }}
%  | <- :: :: assign {{ tex \leftarrow }}
%  | forall :: :: forall {{ tex \forall }}
%  | alphac :: :: alphac {{ tex \alpha_{c} }}
%  | sigma :: :: sigma {{ tex \sigma }}
%  | tau :: :: tau {{ tex \tau }}
%  | exists :: :: exists {{ tex \exists }}
  | >a :: :: args {{ tex \overline{a} }}
  | >f :: :: formals {{ tex \overline{f} }}
  | >n :: :: nums {{ tex \overline{n} }}
  | >s :: :: strs {{ tex \overline{s} }}
  | >v :: :: addresses {{ tex \overline{\nu} }}
  | empty :: :: empty {{ tex \emptyset }}
  | dpn :: :: doublepointn {{ tex :_{n} }}
  | and :: :: conj {{ tex \land }}
  | seq :: :: seq {{ tex \vdash }}
  | i :: :: frame_address {{ tex \iota }}
  | d :: :: promise_address {{ tex \delta }}
  | v :: :: data_object_address {{ tex \nu }}
  | v_opt :: :: possibly_missing_data_object_address {{ tex \nu_{\bot} }}
  | env :: :: environment {{ tex \Gamma }}
  | primv :: :: primitive_value{{ tex \kappa }}
  | attr :: :: attribute {{ tex \alpha }}
  | primvattr :: :: primitive_value_with_attributes {{ tex \kappa^{\alpha} }}
  | cc :: :: context {{ tex \mathbb{ C } }}
  | rr :: :: context_ret {{ tex \mathbb{ R } }}
  | != :: :: neq {{ tex \neq }}
  | === :: :: equi {{ tex \equiv }}
  | \/ :: :: or {{ tex \vee }}
  | notin :: :: notin {{ tex \notin  }}
  | bottom :: :: bottom {{ tex \bot }}

e :: 'e_' ::= {{ com expression }}
  | n :: :: numlit
  | s :: :: strlit
  | x :: :: var
  | x[[ e ]] :: :: array_access
  | { e1 ; e2 } :: :: block
  | function( lf ) e :: :: function_decl
  | x( la ) :: :: function_call
  | x <- e :: :: assignment
  | x <<- e :: :: supassignment
  | x[[ e1 ]] <- e2 :: :: array_assignment
  | x[[ e1 ]] <<- e2 :: :: array_superassignment
  | attr( e1 , e2 ) :: :: attribute_extraction
  | attr( e1 , e2 ) <- e3 :: :: attribute_assignment
  | u :: :: value
  | v ( la ) :: M:: partially_reduced_function_calls
  | cc  [ e ] :: M:: ctx
  | rr [ e ] :: M:: ctx2
  
f :: 'f_' ::=
  | x :: :: var
  | x = e :: :: var_dft

lf {{ tex \overline{f} }} :: 'lf_' ::=
  | [] :: :: empty_list
  | f :: :: arg
  | f lf :: :: args

a :: 'a_' ::=
  | e :: :: var
  | x = e :: :: var_dft

la {{ tex \overline{a} }} :: 'alist_' ::=
  | [] :: :: empty_list
  | a :: :: arg
  | a la :: :: args

H :: 'H_' ::=
  | empty :: :: empty_heap
  | H [ i / F ] :: :: heap_frame_mapping
  | H [ d / e G ] :: :: heap_promise_mapping
  | H [ v / primvattr ] :: :: heap_primitive_value_mapping
  | H [ d / v ] :: :: heap_value_address

attr {{ tex \alpha }} :: 'attr_' ::=
  | v_opt v_opt :: :: attribute_pair

u :: 'u_' ::=
  | d :: :: promise_address
  | v :: :: data_object_address

primv {{ tex \kappa }} :: 'primv_' ::=
  | num[ >n ] :: :: num_array
  | str[ >s ] :: :: str_array
  | gen[ >v ] :: :: addr_array
  | \ lf . e, G :: :: closure

F :: 'frame_' ::=
  | [] :: :: empty_frame
  | F [ x / u ] :: :: frame_binding
  | F [ x / bottom ] :: :: bottom_binding

G {{ tex \Gamma }} :: 'closure_env_' ::=
  | [] :: :: empty_env
  | i * G :: :: frame_address

%expression_stack {{ tex S }} :: 'expression_stack_' ::=
S :: 'expression_stack_' ::=
  | [] :: :: empty_stack
  | e G * S :: :: stack






%typescheme, sigma {{ tex \sigma }} :: 'tyscheme_' ::=
%  | forall alpha . sigma :: :: gentvar
%  | forall alphac . sigma :: ::  gencvar
%  | tau :: :: ty

%constraint, c :: 'cs_' ::=
%  | alphac :: :: cvar
%  | exists x dpn tau :: :: exists
%  | c and c' :: :: conjonction

%type, tau {{ tex  \tau }} :: 'ty_' ::=
%  | alpha :: :: type
%  | ( >tau ) ->c tau' :: :: arrowty

%G {{ tex \Gamma }}  :: 'env_' ::=
%  | x : sigma , G :: :: bind_env
%  | alpha , G :: :: tvar_env
%  | alphac , G :: :: cvar_env
%  | empty :: :: empty_env


%v :: 'v_' ::= 
%  | \ ( >a ) . t :: :: lam
%  | TRUE :: :: true
%  | FALSE :: :: false
%  | n :: :: numerics


%state, st :: 's_' ::=
%| S * H :: :: truc

rr {{ tex \mathbb{ R } }} :: 'rr_' ::=
| __ :: :: simple_context
| { v ; __ } :: :: add_context
  
cc {{ tex \mathbb{ C } }} :: 'cc_' ::=
| __ :: :: simple_context
| x <- __ :: :: assignment_context
| x[[ __ ]] :: :: subset_context
| x[[ e ]] <- __ :: :: subset_assignment_context
| x[[ __ ]] <- v :: :: subset_assignment_context2
| { __ ; e } :: :: sequence_context
| { v ; __ } :: :: sequence_context2


P :: 'ppp' ::=
| e :: :: single_exp
| e P :: :: exp_head
| [] :: :: no_exp

N :: 'nnn' ::=
| x = e :: :: id_bind
| x = e N :: :: id_bind_head
| N N' :: :: n_conc
| [] :: :: no_bind



formula :: formula_ ::=
| judgement :: :: judgement
| H( d ) = e G :: :: heap_promise_proj
| H( d ) = v :: :: heap_promise_proj_data_address
| H( v ) = primv :: :: heap_primv_proj
| H( v ) != primv :: :: not_heap_primv_proj
| H = H' :: :: heap_is
| G = G' :: :: env_is
| i ( H , x ) = u :: :: heap_frame_proj
| i fresh :: :: i_fresh
| d fresh :: :: d_fresh
| f === f' :: :: f_equi
| N === N' :: :: N_equi
| formula \/ formula' :: M :: or
| x notin N :: :: x_notin_N

contextrules
cc _:: e :: e
rr _:: e :: e

%subrules
%  u <:: e


defns
Red :: '' ::=



defn
S ; H ==> S' ; H' :: ::reduce::'' by

e G ; H --> e' ; H'
---------------- :: exp
cc [ e ] G * S ; H ==> cc [ e' ] G * S ; H'

H( d ) = e G'
------------------- :: ForceP
cc [ d ] G * S ; H ==>  e G' * cc [ d ] G * S ; H

getfun(H,G,x) = d
-------------------------- :: ForceF
cc [ x(la) ] G * S ; H ==> d G * cc [ x(la) ] G * S ; H

getfun(H,G,x) = v
-------------------------- :: GetF
cc [ x(la) ] G * S ; H ==> d G * cc [ v(la) ] G * S ; H


H(v) = \ lf . e, G'
args(lf, la, G, G', H) = F, G'', H'
-------------------------- :: InvF
cc [ v(la) ] G * S ; H ==> e G'' * cc [ v(la) ] G * S ; H'

H' = H[ d / v ]
------------------- :: RetP
rr [ v ] G' * cc [ d ] G * S ; H ==>  cc [ d ] G * S ; H'


-------------------------- :: RetF
rr [ v ] G' * cc [ v2 ( la ) ] G * S ; H ==> cc [ v ] G * S ; H'






defn
e G ; H --> e' ; H' :: ::ereduce::'' by

%fake rule

---------------- :: eexp
e env ; H --> e' ; H'





defn
getfun( H , G , x ) = u :: ::getfun::'' by

---------------::GetFun
getfun(H,G,x) = u

G = i * G'
i ( H , x ) = v
H(v) = \ lf . e, G''
---------------::GetF1
getfun(H,G,x) = v

G = i * G'
i ( H , x ) = d
H(d) = v
H(v) = \ lf . e, G''
-------------::GetF3
getfun(H,G,x) = v


G = i * G'
i ( H , x ) = d
H(d) = e G''
-------------::GetF4
getfun(H,G,x) = d

defn
getfun( H , G , x ) = getfun( H' , G' , x' ) :: ::getfun_eq::'' by

G = i * G'
i ( H , x ) = v
H(v) != \ lf . e, G''
---------------::GetF2
getfun(H,G,x) = getfun(H,G',x)


G = i * G'
i ( H , x ) = d
H(d) = v
H(v) != \ lf . e, G''
---------------::GetF5
getfun(H,G,x) = getfun(H,G',x)



defn
split( la , P , N ) = P' , N' :: ::split_is::'' by

split(la,P,N) = P', N'
----------------------------------- :: split1
split(x = e la, P, N) = P' , x = e N'

split(la, P, N) = P', N'
----------------------------:: split2
split(e la, P, N) = e P', N'


------------------------:: split3
split([], P, N) = P, N



defn
args ( lf , la , G , G' , H) = F , G'' , H' :: ::args_is::'' by

split(la, [] , []) = P, N
i fresh
G'' = i * G'
args2(lf, P, N, G, G'', H) = F, H'
H'' = H'[ i / F ]
------------------------------------::Args
args(lf, la, G, G', H) = F, G'', H''

defn
args2 ( lf , P , N , G , G' , H ) = F , H' :: ::args2_is::'' by


f0 === x \/ f0 === x = e'
N === N x = e N''
args2( lf , P , N' N'' , G , G' , H ) = F, H'
d fresh
H'' = H' [ d / e G ]
-----------------------------------------------::Args1
args2(f0 lf, P, N, G, G', H) = F [ x / d ], H''

f0 === x \/ f0 === x = e'
x notin N
args2( lf , P , N , G , G' , H ) = F, H'
d fresh
H'' = H' [ d / e G ]
-----------------------------------------------::Args2
args2(f0 lf, e P, N, G, G', H) = F [ x / d ], H''

f0 === x \/ f0 === x = e'
N === N x = e N''
args2( lf , P , N' N'' , G , G' , H ) = F, H'
d fresh
H'' = H' [ d / e G ]
-----------------------------------------------::Args3
args2(x lf, [], N, G, G', H) = F [ x / bottom ], H''

x notin N
args2( lf , [] , N , G , G' , H ) = F, H'
d fresh
H'' = H' [ d / e G' ]
-----------------------------------------------::Args4
args2(x = e lf, [], N, G, G', H) = F [ x / d ], H''

-----------------------------------------------::Args5
args2([], [], [], G, G', H) = [], H''